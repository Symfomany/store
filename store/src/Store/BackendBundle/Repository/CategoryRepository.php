<?php

namespace Store\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * Get Products of User
     * @param int $user
     * @return array
     */
    public function getCategoryByUser($user){
       /* $query = $this->getEntityManager()
            ->createQuery(
                "
                    SELECT c
                    FROM StoreBackendBundle:Category c
                    WHERE c.jeweler = :user
                    "
            )
            ->setParameter('user', $user);
       */

        /*
         * J'appel la méthode getCategoryByUserBuilder()
         * qui me retourne un objet QueryBuilder
         * Je le transforme ensuite en Objet Query
         *
         */
        $query = $this->getCategoryByUserBuilder($user)->getQuery();

        return $query->getResult();
    }

    /**
     * DQL Syntax with Form
     * @param int $user
     * @return array
     */
    public function getCategoryByUserBuilder($user){

        /**
         * Le formulaire ProductType attend un objet createQueryBuilder()
         *  ET NON PAS l'objet createQuery()
         */
        $queryBuilder = $this->createQueryBuilder('c')
            ->where('c.jeweler = :user')
            ->orderBy('c.title', 'ASC')
            ->setParameter('user', $user);

        return $queryBuilder;
    }





    /**
     * Retourne le nb de catégorie de mon bijoutier
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCountByUser($user = null){
        $query = $this->getEntityManager()
            ->createQuery(
                "
                 SELECT COUNT(c) AS nb
                 FROM StoreBackendBundle:Category c
                 WHERE c.jeweler = :user"
            )
            ->setParameter('user', $user);

        // retourne 1 résultat ou null
        return $query->getOneOrNullResult();
    }


}
