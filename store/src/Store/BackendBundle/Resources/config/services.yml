services:

    # Nom du Bundle Complet . Nom de la Classe
    store.backend.email: #Nom du service
        class: Store\BackendBundle\Email\Email #class du Service
        arguments: ["@mailer", "@twig"]
        # Service Swift Mailer
        # Service Twig

    # Nom de service
    store.backend.notification:
        # Classe avec Namespaces
        class: Store\BackendBundle\Notification\Notification
        # ARgument du constructeur de ma classe en service
        arguments: ["@session"]

    # Datas
    store.backend.datas:
        # Classe avec Namespaces
        class: Store\BackendBundle\Statistics\DatasDoctrineFactory
        # ARgument du constructeur de ma classe en service
        arguments: ["@doctrine.orm.entity_manager"]


    store.backend.validator.location:
        arguments: ["@doctrine.orm.entity_manager"]
        class: Store\BackendBundle\Validator\Constraints\LocationValidator
        tags:
            - { name: validator.constraint_validator, alias: validation_location }

    # Nom du service
    store.backend.listener.authentification: #  Nom du service
       #  Nom de ma classe avec namespaces
       class: Store\BackendBundle\Listener\AuthentificationListener

       #  Nom des services injecté en constructeur de ma classe
       arguments: ["@doctrine.orm.entity_manager","@security.context", "@store.backend.notification","@session", "@router"]

       # Etende le mecanisme de security au niveau de linteraction login
       # avec un mecanisme d'écouteur
       tags:
         - { name: kernel.event_listener, event: security.interactive_login,method: onAuthenticationSuccess }


    # Nom du service
    store.backend.listener.product.persist:

        # Nom de la classe
        class: Store\BackendBundle\Listener\ProductListener

        # Argument du constructeur
        # Service de notification que l'on a crée juste en dessus
        # ATTENTION: L'injection des dépendances se fait si mon service n'est pas deja injecté ,
        # notement par le tag qui est associ à mon service
        arguments: ["@store.backend.notification"]

        # Ma classe utilisera le mecanisme d'écouteur de Symfony 2
        tags:
            # name: correspond au mecanisme ou ma classe sera affectée
            # et plus particulierement au mecanisme d'écouteur de doctrine

            # event: sera l'événement déclencheur de mon service
            # et plus particulierement à la modification d'un objet

            # method: la methode qui sera appellé après déclenchement de mon event
            # et plus particulierement la methode appelé dans mon service: postUpdate()
            # Evenement à doctrine: (Lifecycle)
            # Doctrine a une liste exhaustive d'evenement appelé "LifesCydle"
            # Cycle de vie d'un objet en Doctrine
            # + preRemove
            # + postRemove
            # + prePersist : quand je crée mon objet en base de donnée
            # + postPersist
            # + preUpdate : quand je modifie mon objet en base de donnée
            # + postUpdate
            # + postLoad
            # + loadClassMetadata

            # postUpdate:
            - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
            - { name: doctrine.event_listener, event: postPersist, method: postPersist }
            - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }
#            - { name: doctrine.event_listener, event: postPersist, method: postPerist }

    # Nom de notre service
    store.backend.voter:

        # Classe affectée à notre service
        class: Store\BackendBundle\Security\Authorization\Voter\OwnerVoter

        # Mecanisme de sécurité au niveau des votes de la gestion des roles
        # Implémente notre service parmi le mécanisme de Vote des authorisations
        # de la sécurité
        tags:
           - { name: security.voter }

    # Extension de Twig
    store.backend.twig.store_backend_extension:
        # Notre classe qui va étendre Twig
        class: Store\BackendBundle\Twig\Extensions\StoreBackendExtension
        tags:
            - { name: twig.extension }

    # Nom de service
    store.backend.oauthprovider:
        # Classe avec Namespaces
        class: Store\BackendBundle\Provider\OAuthProvider

    # Authentification Provider
    wsse.security.authentication.provider:
      class:  Store\BackendBundle\Security\Authentification\Provider\WsseProvider
      arguments: ['', %kernel.cache_dir%/security/nonces]

    # Authentification Listener
    wsse.security.authentication.listener:
      class:  Store\BackendBundle\Security\Authentification\Firewall\WsseListener
      arguments: [@security.context, @security.authentication.manager]